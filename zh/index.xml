<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>欢迎使用 go-mail 文档 on go-mail</title><link>https://go-mail.dev/zh/</link><description>Recent content in 欢迎使用 go-mail 文档 on go-mail</description><generator>Hugo -- gohugo.io</generator><language>zh</language><atom:link href="https://go-mail.dev/zh/index.xml" rel="self" type="application/rss+xml"/><item><title>简介</title><link>https://go-mail.dev/zh/getting-started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-mail.dev/zh/getting-started/introduction/</guid><description>&lt;p>这篇简短的教程向您展示了如何从安装到发送第一封邮件使用go-mail。&lt;/p></description></item><item><title>Simple Mailer Example</title><link>https://go-mail.dev/zh/examples/simple-mailer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-mail.dev/zh/examples/simple-mailer/</guid><description>This example is the most simple piece of code that is required to successfully send a mail with go-mail.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.com/wneessen/go-mail&amp;#34; ) func main() { msg := mail.NewMsg() if err := msg.From(&amp;#34;toni@tester.com&amp;#34;); err !</description></item><item><title>安全策略</title><link>https://go-mail.dev/zh/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-mail.dev/zh/security/</guid><description> 已知漏洞 尽管 go-mail 没有已知的安全漏洞，您仍然可以查看我们的 GitHub 项目的安全公告页面。
报告漏洞 要报告 go-mail 中的（可能的）安全问题，请发送电子邮件至security@go-mail.dev或使用 Github 的私人报告功能。 我们非常欢迎报告。 即使您不确定您发现的特定问题是否属于安全问题，我们也很乐意听取详细信息，以便我们一起确定是否需要解决该问题。
通常，您会在一天内甚至几个小时内收到答复。
端到端加密 您可以将 OpenPGP/GPG 加密邮件发送到security@go-mail.dev地址。
OpenPGP/GPG 公钥：
-----BEGIN PGP PUBLIC KEY BLOCK----- xjMEY8RwPBYJKwYBBAHaRw8BAQdAiLsW7pv+CCMq5Ol0hbIB1HnJI97u3zJw Wslr7GJzgOzNK3NlY3VyaXR5QGdvLW1haWwuZGV2IDxzZWN1cml0eUBnby1t YWlsLmRldj7CjAQQFgoAPgUCY8RwPAQLCQcICRCgTBOxf8keAAMVCAoEFgAC AQIZAQIbAwIeARYhBAoWEB7Y0bE7zcIOuaBME7F/yR4AAAByugD9HabWXsyD aPIDrIS97OBA1OLltB4NPT5ba9whKRxTEmMBALBiB2ML4ZTrjLqI6UbGkhJq mWeMtvmU0chZT7WNBO0PzjgEY8RwPBIKKwYBBAGXVQEFAQEHQGDEccz6gvl5 t8cMMb/Dy2l0elRZL+Nd0gOhnbWMWlArAwEIB8J4BBgWCAAqBQJjxHA8CRCg TBOxf8keAAIbDBYhBAoWEB7Y0bE7zcIOuaBME7F/yR4AAADaMwD9EvEA3NSN NtdSaeL/euh6oRRiCjKzh5bIqZiQXqMlIOoBAJvPE2facs8MISwTtDoHW0sD WdOs3yBpGlGCs5WEqvQH=zn96 -----END PGP PUBLIC KEY BLOCK-----</description></item><item><title>客户端选项</title><link>https://go-mail.dev/zh/reference/client/options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-mail.dev/zh/reference/client/options/</guid><description>Option WithDebugLog() WithDSN() WithDSNMailReturnType() WithDSNRcptNotifyType() WithHELO() Option Signature 1 type Option func(*Client) error Option 是可选参数函数，可以用作 NewClient() 方法的可选参数，以覆盖返回的 Client 的默认值。
WithDebugLog() Signature 1 func WithDebugLog() Option Example 1 2 3 4 5 6 7 8 9 10 package main import &amp;#34;github.com/wneessen/go-mail&amp;#34; func main() { c, err := mail.NewClient(&amp;#34;mail.example.com&amp;#34;, mail.WithDebugLog()) if err != nil { panic(err) } } Version Introduced in go-mail v0.3.9 WithDebugLog 启用 SMTP 流量的调试日志。 启用后，客户端与服务器之间的任何 SMTP 通信都会记录到 os.Stderr。</description></item><item><title>批量邮件示例</title><link>https://go-mail.dev/zh/examples/bulk-mailer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-mail.dev/zh/examples/bulk-mailer/</guid><description>在这个示例中，我们创建了一个小型的批量邮件发送程序，可以将相同的邮件发送给更多的收件人。 对于我们来说，重要的是直接在邮件中寻址收件人，因此我们将使用Go的html/template和text/template系统以及占位符。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 package main import ( &amp;#34;fmt&amp;#34; ht &amp;#34;html/template&amp;#34; &amp;#34;log&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;os&amp;#34; tt &amp;#34;text/template&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.</description></item><item><title>社区指南</title><link>https://go-mail.dev/zh/community/guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-mail.dev/zh/community/guide/</guid><description>go-mail社区正在壮大，如果您正在阅读此文，那么您也想加入！
资源 行为准则 支持和公告渠道 贡献 开发新功能 修复错误 测试 文档 翻译 支持 资源 行为准则 在我们的社区中，我们遵循我们的行为准则，并要求每个想要参与的人都要相应地行事。
支持和公告渠道 Mastodon：在Mastodon上关注我们，以获取有关go-mail的最新消息 go-mail论坛：接收有关go-mail的公告并开始讨论。 Github问题：如果您要报告错误或请求功能，请使用GitHub问题。 请遵守每个存储库的问题模板中指定的规则。 Discord：go-mail开发人员和用户在此处实时会面和聊天的地方。 贡献 go-mail是一个开源的、社区驱动的项目。 我们欢迎任何人加入我们为项目做出贡献。 本文档旨在帮助任何希望熟悉项目和开发流程的人。
开发新功能 修复错误 测试 文档 翻译 支持 开发新功能 我们始终热衷于为go-mail添加新功能。 添加新功能的过程如下：
在Github的问题部分中检查带有“TODO”或“help wanted”标签的可用问题 如果没有找到打开的“TODO”/“help wanted”问题或您想要的功能未涵盖，请为该特定功能打开一个提案问题，并等待项目维护者的“OK” 开发之前，请检查问题是否包括以下信息： 增强的目的 增强范围之外的内容 如果问题不包括此信息，请随时向打开问题的人请求信息。 有时会创建占位符问题并需要更多详细信息 在问题上发表评论，说明您希望开发该功能 克隆存储库并创建格式为feature/&amp;lt;issue_number&amp;gt;_&amp;lt;issue_title&amp;gt;的分支 新功能通常需要文档，因此请确保您还添加或更新了文档作为更改的一部分 请确保您的代码具有所需的测试覆盖范围 一旦功能准备好进行测试，请创建草案PR。 请确保PR说明中列出了测试场景和测试用例，并带有复选框，以便其他人知道仍需测试什么 一旦所有测试都完成，请从草案中更新PR的状态并留言 未附带相应问题的任何PR可能会被拒绝。 修复错误 修复错误的过程如下：
检查Github问题并选择要修复的错误 开发之前，请检查问题是否包括以下信息： 受影响的平台范围 重现步骤。 有时会打开不是go-mail问题的错误，并且责任在于报告人证明它是具有最小可重现示例的go-mail问题 如果问题不包括此信息，请随时向打开问题的人请求信息 在问题上发表评论，说明您希望开发修复程序 克隆存储库并创建格式为bugfix/&amp;lt;issue_number&amp;gt;_&amp;lt;issue_title&amp;gt;的分支 一旦修复程序准备好进行测试，请创建草案PR。 请确保PR说明中列出了测试场景和测试用例，并带有复选框，以便其他人知道仍需测试什么 一旦所有测试都完成，请从草案中更新PR的状态并留言。 没有任何阻止您打开问题并自己解决它，但请注意，所有错误修复都应该进行讨论，因为方法可能会产生意外的副作用。 未附带相应问题的任何PR可能会被拒绝。 测试 测试对于确保项目质量至关重要。 有几种情况下，测试可以真正帮助项目：
测试是否可以在本地系统上重现错误 测试PR以确保它们正常工作 如果您选择测试某人的错误报告是否可以在本地系统上重现，则可以在问题上添加评论，确认这一点，并附上测试程序的输出。</description></item></channel></rss>